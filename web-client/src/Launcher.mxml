<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark"
               xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:local="*" backgroundColor="#d0d0d0"
               addedToStage="addToStageHandler()" applicationComplete="applicationCompleteHandler()"
               xmlns:ui="jp.archilogic.docnext.ui.*">
    <fx:Script>
        <![CDATA[
            import mx.controls.Alert;
            import mx.events.FlexEvent;
            import mx.managers.ToolTipManager;
            import mx.rpc.Fault;
            import mx.utils.ObjectUtil;
            import __AS3__.vec.Vector;
            import jp.archilogic.ServiceUtil;
            import jp.archilogic.util.DebugHelper;
            import org.libspark.ui.SWFWheel;
            import spark.components.Label;

            private var hideCallback : Function = null;

            public function hide() : void {
                if ( hideCallback != null ) {
                    hideCallback();
                }
            }

            private function addToStageHandler() : void {
                SWFWheel.initialize( stage );
                DebugHelper.load( stage , this , true );
            }

            private function addViewer( bid : String ) : void {
                var viewer : Viewer = new Viewer();
                viewer.ids = bid;
                addElement( viewer );

                hideCallback = function() : void {
                    viewer.documentComponent.visible = false;
                    restriction.visible = true;
                };

                addEventListener( MouseEvent.CLICK , function() : void {
                    viewer.documentComponent.visible = true;
                    restriction.visible = false;
                } );

                addEventListener( Event.DEACTIVATE , function() : void {
                    viewer.documentComponent.visible = false;
                    restriction.visible = true;
                } );
            }

            private function applicationCompleteHandler() : void {
                ExternalInterface.addCallback( "hide" , hide );

                ServiceUtil.defaultFaultHandler = function( fault : Fault ) : void {
                    throw new Error( fault.message );
                };

                loaderInfo.uncaughtErrorEvents.addEventListener( UncaughtErrorEvent.UNCAUGHT_ERROR ,
                                                                 function( e : UncaughtErrorEvent ) : void {
                    var message : String;

                    if ( e.error is Error ) {
                        var error : Error = e.error;
                        message =
                            error.message + "\n----------------------------------------\n" + error.getStackTrace();
                    } else {
                        message = ObjectUtil.toString( e.error );
                    }

                    Alert.show( message , 'Error' );

                    e.preventDefault();
                } );

                var bid : String = this.parameters[ 'bid' ];

                addViewer( bid );
            }
        ]]>
    </fx:Script>

    <ui:Restriction id="restriction" width="100%" height="100%" visible="false" />
</s:Application>
