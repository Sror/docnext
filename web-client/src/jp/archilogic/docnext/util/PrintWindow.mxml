<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark"
               xmlns:mx="library://ns.adobe.com/flex/mx" width="500" height="300" title="print configure"
               close="closeHandler(event)">

    <fx:Script>
        <![CDATA[
            import jp.archilogic.docnext.helper.PageHeadHelper;
            import jp.archilogic.docnext.ui.DocumentComponent;
            
            import mx.controls.Alert;
            import mx.core.FlexGlobals;
            import mx.printing.FlexPrintJob;
            
            import spark.components.Image;

            private static var _instance : PrintWindow;

            public static function show( documentComponent : DocumentComponent ) : void {
                if ( _instance == null ) {
                    _instance = new PrintWindow();
                }
                _instance._documentComponent = documentComponent;

                var pageHeadHelpder : PageHeadHelper = documentComponent.currentPageHeadHelpder
                var currentHead : int = documentComponent.currentHead;
                var isSingle : Boolean = pageHeadHelpder.isSingleHead( currentHead );

                if ( isSingle ) {
                    var page : int = pageHeadHelpder.headToPage( currentHead );
                    _instance.doPrint( _instance.PRINT_LEFT , page );
                    return;
                }

                var w : int = FlexGlobals.topLevelApplication.width;
                var h : int = FlexGlobals.topLevelApplication.height;
                _instance.x = ( w - _instance.width ) * 0.5;
                _instance.y = ( h - _instance.height ) * 0.5;

                if ( !FlexGlobals.topLevelApplication.contains( _instance ) ) {
                    //Flex3がtopApplicationだと、デフォルトでlayoutがVerticalLayoutなので、SystemManagerに
                    //FlexGlobals.topLevelApplication.addElement(printWindow);
                    FlexGlobals.topLevelApplication.systemManager.addChild( _instance );
                }
            }

            private const PRINT_BOTH : int = 2;
            private const PRINT_LEFT : int = 0;
            private const PRINT_RIGHT : int = 1;

            private var _documentComponent : DocumentComponent;
            private var pageAspectRatio : Number;
            private var pageHeight : int;
            private var pageWidth : int;

            private function closeHandler( event : Event = null ) : void {
                //FlexGlobals.topLevelApplication.removeElement(printWindow);
                FlexGlobals.topLevelApplication.systemManager.removeChild( _instance );
            }

            private function doPrint( printType : int , index : int ) : void {
                var isSingle : Boolean = printType != PRINT_BOTH;

                var docId : int = _documentComponent.docId;
                var level : int = _documentComponent.imageInfo.maxLevel;
                var size : Point = _documentComponent.calcMaxPageSize();

                DocumentLoadUtil.loadPageSource( docId , index , level , size ,
                                                 function( bitmapData : BitmapData ) : void {
                    if ( bitmapData == null ) {
                        showErrorMessage();
                        return;
                    }

                    if ( isSingle ) {
                        var printJob : PrintJob = printStandby();
                        if ( printJob ) {
                            printJob.addPage( getSinglePageImage( bitmapData ) );
                            printJob.send();
                        }
                    } else {
                        DocumentLoadUtil.loadPageSource( docId , ( index + 1 ) , level , size ,
                                                         function( bitmapData2 : BitmapData ) : void {
                            if ( bitmapData2 == null ) {
                                showErrorMessage();
                                return;
                            }

                            var printJob : PrintJob = printStandby();
                            if ( printJob ) {
                                printJob.addPage( getSinglePageImage( bitmapData ) );
                                printJob.addPage( getSinglePageImage( bitmapData2 ) );
                                printJob.send();
                            }
                        } );
                    }
                } );
            }

            private function getPageShape( source : BitmapData , matrix : Matrix , w : int , h : int ) : Shape {
                var render : Shape = new Shape();
                // make repeat true because of non-repeat bug that draw bitmap out of rectangle
                render.graphics.beginBitmapFill( source , matrix , true , true );
                render.graphics.drawRect( 0 , 0 , w , h );
                render.graphics.endFill();

                return render;
            }

            private function getSinglePageImage( source : BitmapData ) : Sprite {
                var sourceWidth : int = source.width;
                var sourceHeight : int = source.height;

                var pageImage : Sprite = new Sprite();
                var matrix : Matrix = new Matrix();

                var sourceAspectRatio : Number = sourceHeight / sourceWidth;

                var isFitWithWidth : Boolean = isFitWithWidth( sourceAspectRatio );
                var scale : Number = isFitWithWidth ? pageWidth / sourceWidth : pageHeight / sourceHeight;

                trace( "scale : " + scale );
                matrix.scale( scale , scale );
                var verticalPadding : int = 0 , horizontalPadding : int = 0;

                if ( isFitWithWidth ) {
                    trace( "FitWithWidth" );
                    verticalPadding = pageHeight - sourceHeight * scale;
                } else {
                    trace( "FitWithHeight" );
                    horizontalPadding = pageWidth - sourceWidth * scale;
                }
                //matrix.translate(paddingLeft, paddingTop);
                trace( "verticalPadding : " + verticalPadding );
                trace( "horizontalPadding : " + horizontalPadding );
                pageImage.graphics.beginFill( 0xffffff , 1 );
                pageImage.graphics.drawRect( 0 , 0 , pageWidth , pageHeight );
                pageImage.graphics.endFill();

                var w : int = sourceWidth * scale; //pageWidth - horizontalPadding;
                var h : int = sourceHeight * scale; //pageHeight - verticalPadding;
                var render : Shape = getPageShape( source , matrix , w , h );
                render.x = horizontalPadding * 0.5;
                render.y = verticalPadding * 0.5;

                pageImage.addChild( render );

                return pageImage;
            }

            private function isFitWithWidth( sourceAspectRatio : Number ) : Boolean {
                return pageAspectRatio > sourceAspectRatio; // ratio = height / width
            }

            private function printClickHandler( printType : int ) : void {
                closeHandler();

                var pageHeadHelpder : PageHeadHelper = _documentComponent.currentPageHeadHelpder
                var currentHead : int = _documentComponent.currentHead;
                var isSingle : Boolean = pageHeadHelpder.isSingleHead( currentHead );
                var page : int = pageHeadHelpder.headToPage( currentHead );

                if ( isSingle ) {
                    if ( printType == PRINT_BOTH ) {
                        Alert.show( "Error:存在しないページの指定。" );
                        return;
                    } else {
                        var isLast : Boolean = page == pageHeadHelpder.headToPage( pageHeadHelpder.length - 1 );

                        if ( printType == ( ( _documentComponent.isBindingRight == isLast ) ? PRINT_LEFT : PRINT_RIGHT ) ) {
                            Alert.show( "Error:存在しないページの指定。" );
                            return;
                        }
                    }
                }

                var isNextPage : Boolean =
                    printType == ( _documentComponent.isBindingRight ? PRINT_LEFT : PRINT_RIGHT );
                doPrint( printType , page + ( isNextPage && !isSingle ? 1 : 0 ) );
            }

            private function printStandby() : PrintJob {
                var ret : PrintJob = new PrintJob();
                if ( ret.start() ) {
                    pageWidth = ret.pageWidth;
                    pageHeight = ret.pageHeight;
                    pageAspectRatio = pageHeight / pageWidth;
                    return ret;
                }
                return null;
            }

            private function showErrorMessage() : void {
                Alert.show( "通信中にエラーが発生しました" );
            }
        ]]>
    </fx:Script>

    <s:layout>
        <s:VerticalLayout paddingLeft="5" paddingRight="5" paddingTop="5" paddingBottom="5" />
    </s:layout>

    <s:Form id="form" width="100%" height="100%">
        <s:FormHeading label="印刷するページを選んで下さい。" breakOpportunity="any" width="100%" />
        <s:FormItem>
            <s:HGroup>
                <s:Button id="leftPrintButton" label="左頁" click="printClickHandler(PRINT_LEFT)" />
                <s:Button id="rightPrintButton" label="右頁" click="printClickHandler(PRINT_RIGHT)" />
                <s:Button id="bothPrintButton" label="両面" click="printClickHandler(PRINT_BOTH)" />
            </s:HGroup>
        </s:FormItem>
    </s:Form>
</s:TitleWindow>
